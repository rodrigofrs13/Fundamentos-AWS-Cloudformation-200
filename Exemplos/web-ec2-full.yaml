---
AWSTemplateFormatVersion: 2010-09-09
Description: Workshop Cloudformation - 200 - Web EC2 Full
Parameters:
  CustomVPC:
    Description: Select One VPC available in your existing account
    Type: AWS::EC2::VPC::Id
    Default: "<your default VPC ID>"
  PublicSubnet1:
    Description: Select one public subnet available in your existing account
    Type: AWS::EC2::Subnet::Id
    Default: "<your default public subnet id>"
  PublicSubnet2:
    Description: Select one public subnet available in your existing account
    Type: AWS::EC2::Subnet::Id
    Default: "<your default public subnet id>"
Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref CustomVPC
      GroupName: "AllowEc2Traffic"
      GroupDescription: "Enable SSH access and HTTP access on the inbound port for EC2"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: InstanceSecurityGroup
  Instance1:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: rodrigofrs
      ImageId: ami-005f9685cb30f234b
      SubnetId: !Ref PublicSubnet1
      InstanceType: t3a.micro
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo amazon-linux-extras install nginx1 -y 
            sudo systemctl enable nginx
            sudo systemctl start nginx            
      Tags:
        - Key: Name
          Value: Instance1
  Instance2:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: rodrigofrs
      ImageId: ami-005f9685cb30f234b
      InstanceType: t3a.micro
      SubnetId: !Ref PublicSubnet2
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo amazon-linux-extras install nginx1 -y 
            sudo systemctl enable nginx
            sudo systemctl start nginx         
      Tags:
        - Key: Name
          Value: Instance2
  ELBTargetGroup1:
   Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
   Properties:
     HealthCheckIntervalSeconds: 6
     HealthCheckTimeoutSeconds: 5
     HealthyThresholdCount: 2
     Port: 80
     Protocol: HTTP
     UnhealthyThresholdCount: 2
     VpcId: !Ref CustomVPC
     TargetType: instance
     Targets: 
       - Id: !Ref Instance1
         Port: 80
  ELBTargetGroup2:
   Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
   Properties:
     HealthCheckIntervalSeconds: 6
     HealthCheckTimeoutSeconds: 5
     HealthyThresholdCount: 2
     Port: 80
     Protocol: HTTP
     UnhealthyThresholdCount: 2
     VpcId: !Ref CustomVPC
     TargetType: instance
     Targets: 
       - Id: !Ref Instance2
         Port: 80
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ELBTraffic"
      GroupDescription: "Enable HTTP access on the inbound port for ELB"
      VpcId: !Ref CustomVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ELBSecurityGroup
  ElasticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups: 
        - !Ref ELBSecurityGroup
  ElbListener1:
   Type: 'AWS::ElasticLoadBalancingV2::Listener'
   Properties:
     DefaultActions:
       - Type: forward
         TargetGroupArn: !Ref ELBTargetGroup1
     LoadBalancerArn: !Ref ElasticLoadBalancer
     Port: '8000'
     Protocol: HTTP
  ElbListener2:
   Type: 'AWS::ElasticLoadBalancingV2::Listener'
   Properties:
     DefaultActions:
       - Type: forward
         TargetGroupArn: !Ref ELBTargetGroup2
     LoadBalancerArn: !Ref ElasticLoadBalancer
     Port: '9000'
     Protocol: HTTP
Outputs:
  outputInstanceSecurityGroup:
    Description: A reference to the created security group
    Value: !Ref InstanceSecurityGroup
  outputUbuntuInstance:
    Description: A reference to the created EC2 Instance
    Value: !Ref Instance1
  outputUbuntuInstance:
    Description: A reference to the created EC2 Instance
    Value: !Ref Instance2
  outputELBTargetGroup:
    Description: A reference to the created Target Group
    Value: !Ref ELBTargetGroup1
  outputELBTargetGroup:
    Description: A reference to the created Target Group
    Value: !Ref ELBTargetGroup2
  outputELBSecurityGroup:
    Description: A reference to the created Security Group
    Value: !Ref ELBSecurityGroup
  outputElasticLoadBalancer:
    Description: A reference to the created Elastic Load Balancer
    Value: !Ref ElasticLoadBalancer
  outputElasticListener:
    Description: A reference to the created Elastic Load Balancer Listener
    Value: !Ref ElbListener1
  outputElasticListener:
    Description: A reference to the created Elastic Load Balancer Listener
    Value: !Ref ElbListener2